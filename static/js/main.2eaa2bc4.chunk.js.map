{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","keysBtns","Object","keys","ucFirst","str","toUpperCase","slice","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","useState","setGood","setNeutral","setBad","countTotalFeedback","className","target","textContent","toLowerCase","values","some","value","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGe,SAASA,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC3CC,EAAWC,OAAOC,KAAKJ,GAE7B,SAASK,EAAQC,GACf,OAAKA,EAEEA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,GAFvBF,EAKnB,OACE,+BACE,6BACE,wBAAQG,QAASR,EAAjB,SAAmCI,EAAQH,EAAS,QAEtD,6BACE,wBAAQO,QAASR,EAAjB,SAAmCI,EAAQH,EAAS,QAEtD,6BACE,wBAAQO,QAASR,EAAjB,SAAmCI,EAAQH,EAAS,WClB7C,SAASQ,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,+BACE,uCACO,+BAAOJ,OAEd,0CACU,+BAAOC,OAEjB,sCACM,+BAAOC,OAEb,wCACQ,+BAAOC,OAEf,oDAEE,iCAAOC,EAAP,aCvBO,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,ICEC,SAASC,IACtB,IASgBC,EAThB,EAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOR,EAAP,KAAgBU,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOP,EAAP,KAAYU,EAAZ,KAEMC,EAAqB,kBAAMb,EAAOC,EAAUC,GAqClD,OACE,sBAAKY,UAAU,YAAf,UACE,sDACA,cAAC1B,EAAD,CACEC,QAAS,CAAEW,OAAMC,UAASC,OAC1BZ,gBAnBkB,SAAC,GAAgB,IAAdyB,EAAa,EAAbA,OACgB,SAArCA,EAAOC,YAAYC,eACrBP,EAAQV,EAAO,GAGwB,YAArCe,EAAOC,YAAYC,eACrBN,EAAWV,EAAU,GAGkB,QAArCc,EAAOC,YAAYC,eACrBL,EAAOV,EAAM,MAYb,6CAxCYM,EAyCH,CAAER,OAAMC,UAASC,OAxCVV,OAAO0B,OAAOV,GAElBW,MAAK,SAAAC,GAAK,OAAc,IAAVA,KAExB,cAACrB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,IACPT,mBAZNiB,KAAKC,MAAOtB,EAAOa,IAAwB,OAgBlC,cAACR,EAAD,CAAcC,QAAQ,0BCzBnCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.2eaa2bc4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  const keysBtns = Object.keys(options);\n\n  function ucFirst(str) {\n    if (!str) return str;\n\n    return str[0].toUpperCase() + str.slice(1);\n  }\n\n  return (\n    <ul>\n      <li>\n        <button onClick={onLeaveFeedback}>{ucFirst(keysBtns[0])}</button>\n      </li>\n      <li>\n        <button onClick={onLeaveFeedback}>{ucFirst(keysBtns[1])}</button>\n      </li>\n      <li>\n        <button onClick={onLeaveFeedback}>{ucFirst(keysBtns[2])}</button>\n      </li>\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.objectOf(PropTypes.number),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <ul>\n      <li>\n        Good:<span>{good}</span>\n      </li>\n      <li>\n        Neutral:<span>{neutral}</span>\n      </li>\n      <li>\n        Bad:<span>{bad}</span>\n      </li>\n      <li>\n        Total:<span>{total}</span>\n      </li>\n      <li>\n        Positive Feedback:\n        <span>{positivePercentage}%</span>\n      </li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <h3>{message}</h3>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\nimport './App.css';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () =>\n    Math.round((good / countTotalFeedback()) * 100);\n\n  const isEmpty = state => {\n    const allValues = Object.values(state);\n\n    if (allValues.some(value => value !== 0)) {\n      return (\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        ></Statistics>\n      );\n    } else {\n      return <Notification message=\"No feedback given\" />;\n    }\n  };\n\n  const onLeaveFeedback = ({ target }) => {\n    if (target.textContent.toLowerCase() === 'good') {\n      setGood(good + 1);\n    }\n\n    if (target.textContent.toLowerCase() === 'neutral') {\n      setNeutral(neutral + 1);\n    }\n\n    if (target.textContent.toLowerCase() === 'bad') {\n      setBad(bad + 1);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Pleas leave feedback</h2>\n      <FeedbackOptions\n        options={{ good, neutral, bad }}\n        onLeaveFeedback={onLeaveFeedback}\n      />\n\n      <h2>Statistics</h2>\n      {isEmpty({ good, neutral, bad })}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}